// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: protos/storage/language_profiles.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguageProfileService_GetLanguageProfile_FullMethodName    = "/storage.LanguageProfileService/GetLanguageProfile"
	LanguageProfileService_ListLanguageProfiles_FullMethodName  = "/storage.LanguageProfileService/ListLanguageProfiles"
	LanguageProfileService_CreateLanguageProfile_FullMethodName = "/storage.LanguageProfileService/CreateLanguageProfile"
	LanguageProfileService_UpdateLanguageProfile_FullMethodName = "/storage.LanguageProfileService/UpdateLanguageProfile"
	LanguageProfileService_DeleteLanguageProfile_FullMethodName = "/storage.LanguageProfileService/DeleteLanguageProfile"
)

// LanguageProfileServiceClient is the client API for LanguageProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageProfileServiceClient interface {
	GetLanguageProfile(ctx context.Context, in *GetLanguageProfileRequest, opts ...grpc.CallOption) (*GetLanguageProfileResponse, error)
	ListLanguageProfiles(ctx context.Context, in *ListLanguageProfilesRequest, opts ...grpc.CallOption) (*ListLanguageProfilesResponse, error)
	CreateLanguageProfile(ctx context.Context, in *CreateLanguageProfileRequest, opts ...grpc.CallOption) (*CreateLanguageProfileResponse, error)
	UpdateLanguageProfile(ctx context.Context, in *UpdateLanguageProfileRequest, opts ...grpc.CallOption) (*UpdateLanguageProfileResponse, error)
	DeleteLanguageProfile(ctx context.Context, in *DeleteLanguageProfileRequest, opts ...grpc.CallOption) (*DeleteLanguageProfileResponse, error)
}

type languageProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageProfileServiceClient(cc grpc.ClientConnInterface) LanguageProfileServiceClient {
	return &languageProfileServiceClient{cc}
}

func (c *languageProfileServiceClient) GetLanguageProfile(ctx context.Context, in *GetLanguageProfileRequest, opts ...grpc.CallOption) (*GetLanguageProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguageProfileResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_GetLanguageProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) ListLanguageProfiles(ctx context.Context, in *ListLanguageProfilesRequest, opts ...grpc.CallOption) (*ListLanguageProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLanguageProfilesResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_ListLanguageProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) CreateLanguageProfile(ctx context.Context, in *CreateLanguageProfileRequest, opts ...grpc.CallOption) (*CreateLanguageProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLanguageProfileResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_CreateLanguageProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) UpdateLanguageProfile(ctx context.Context, in *UpdateLanguageProfileRequest, opts ...grpc.CallOption) (*UpdateLanguageProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLanguageProfileResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_UpdateLanguageProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageProfileServiceClient) DeleteLanguageProfile(ctx context.Context, in *DeleteLanguageProfileRequest, opts ...grpc.CallOption) (*DeleteLanguageProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLanguageProfileResponse)
	err := c.cc.Invoke(ctx, LanguageProfileService_DeleteLanguageProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageProfileServiceServer is the server API for LanguageProfileService service.
// All implementations must embed UnimplementedLanguageProfileServiceServer
// for forward compatibility.
type LanguageProfileServiceServer interface {
	GetLanguageProfile(context.Context, *GetLanguageProfileRequest) (*GetLanguageProfileResponse, error)
	ListLanguageProfiles(context.Context, *ListLanguageProfilesRequest) (*ListLanguageProfilesResponse, error)
	CreateLanguageProfile(context.Context, *CreateLanguageProfileRequest) (*CreateLanguageProfileResponse, error)
	UpdateLanguageProfile(context.Context, *UpdateLanguageProfileRequest) (*UpdateLanguageProfileResponse, error)
	DeleteLanguageProfile(context.Context, *DeleteLanguageProfileRequest) (*DeleteLanguageProfileResponse, error)
	mustEmbedUnimplementedLanguageProfileServiceServer()
}

// UnimplementedLanguageProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguageProfileServiceServer struct{}

func (UnimplementedLanguageProfileServiceServer) GetLanguageProfile(context.Context, *GetLanguageProfileRequest) (*GetLanguageProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageProfile not implemented")
}
func (UnimplementedLanguageProfileServiceServer) ListLanguageProfiles(context.Context, *ListLanguageProfilesRequest) (*ListLanguageProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguageProfiles not implemented")
}
func (UnimplementedLanguageProfileServiceServer) CreateLanguageProfile(context.Context, *CreateLanguageProfileRequest) (*CreateLanguageProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguageProfile not implemented")
}
func (UnimplementedLanguageProfileServiceServer) UpdateLanguageProfile(context.Context, *UpdateLanguageProfileRequest) (*UpdateLanguageProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageProfile not implemented")
}
func (UnimplementedLanguageProfileServiceServer) DeleteLanguageProfile(context.Context, *DeleteLanguageProfileRequest) (*DeleteLanguageProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguageProfile not implemented")
}
func (UnimplementedLanguageProfileServiceServer) mustEmbedUnimplementedLanguageProfileServiceServer() {
}
func (UnimplementedLanguageProfileServiceServer) testEmbeddedByValue() {}

// UnsafeLanguageProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageProfileServiceServer will
// result in compilation errors.
type UnsafeLanguageProfileServiceServer interface {
	mustEmbedUnimplementedLanguageProfileServiceServer()
}

func RegisterLanguageProfileServiceServer(s grpc.ServiceRegistrar, srv LanguageProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedLanguageProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguageProfileService_ServiceDesc, srv)
}

func _LanguageProfileService_GetLanguageProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).GetLanguageProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_GetLanguageProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).GetLanguageProfile(ctx, req.(*GetLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_ListLanguageProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguageProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).ListLanguageProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_ListLanguageProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).ListLanguageProfiles(ctx, req.(*ListLanguageProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_CreateLanguageProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).CreateLanguageProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_CreateLanguageProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).CreateLanguageProfile(ctx, req.(*CreateLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_UpdateLanguageProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).UpdateLanguageProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_UpdateLanguageProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).UpdateLanguageProfile(ctx, req.(*UpdateLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageProfileService_DeleteLanguageProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageProfileServiceServer).DeleteLanguageProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageProfileService_DeleteLanguageProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageProfileServiceServer).DeleteLanguageProfile(ctx, req.(*DeleteLanguageProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageProfileService_ServiceDesc is the grpc.ServiceDesc for LanguageProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.LanguageProfileService",
	HandlerType: (*LanguageProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguageProfile",
			Handler:    _LanguageProfileService_GetLanguageProfile_Handler,
		},
		{
			MethodName: "ListLanguageProfiles",
			Handler:    _LanguageProfileService_ListLanguageProfiles_Handler,
		},
		{
			MethodName: "CreateLanguageProfile",
			Handler:    _LanguageProfileService_CreateLanguageProfile_Handler,
		},
		{
			MethodName: "UpdateLanguageProfile",
			Handler:    _LanguageProfileService_UpdateLanguageProfile_Handler,
		},
		{
			MethodName: "DeleteLanguageProfile",
			Handler:    _LanguageProfileService_DeleteLanguageProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/storage/language_profiles.proto",
}
